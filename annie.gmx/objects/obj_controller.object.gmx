<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Neural Network Topology:
-&gt;I H O-&gt;
-&gt;I H O-&gt;
-&gt;I H O-&gt;
-&gt;I H O-&gt;
-&gt;I H O-&gt;
-&gt;I H 0-&gt;
-&gt;I H O-&gt;
-&gt;I H O-&gt;
**Note**
ANNIE connects each contiguous layer in a mesh-like fashion so that all
neurons in the previous layer output to all neurons within the current
layer and all neurons in the current layer output to all neurons in
the next layer (aka feedforward method).
*/
annie_init();//initialize annie
ann = annie_create();//create an empty neural network
annie_add_layer(ann,8);//eight neurons within the input layer
annie_add_layer(ann,8);//eight neurons within the output layer
input = ds_list_create();//will be used for input to the network
output = ds_list_create();//will be used to save the output when running the network
exp_output = ds_list_create();//will be used to train the network
q = true;//answer to a question (see Step event)
xx = 0;//first input
yy = 0;//second input
count = 0;



/*
Goal:
     To teach ANNIE to reverse x and y (where x,y is the input
     and y,x is the output)
*/
show_message("Hello, my name is ANNIE. This demo will show you how "+
"I can learn by you teaching me! In this example you give me two "+
"inputs and I will learn how to reverse them.## Hint: I learn faster "+
"if you don't repeat the same problem multiple times too close to "+
"each other, so make it variable and come back to the same problems "+
"later and see if I have learned them!");


do
{
//annie_save(ann,"annie.txt");

ds_list_clear(input);//clear the old input
ds_list_destroy(output);//avoid memory leaks
ds_list_clear(exp_output);//clear old expected output

//Reset input variables//
xx = 0;
yy = 0;

//Get the input//
xx = irandom(10) - 1;//0-9
yy = irandom(10) - 1;//0-9

//Save the input in binary//
switch (xx)
{
    case 0:
        repeat (4) ds_list_add(input,0);
        break;
    case 1:
        repeat (3) ds_list_add(input,0);
        ds_list_add(input,1);
        break;
    case 2:
        repeat (2) ds_list_add(input,0);
        ds_list_add(input,1);
        ds_list_add(input,0);
        break;
    case 3:
        repeat (2) ds_list_add(input,0);
        ds_list_add(input,1);
        ds_list_add(input,1);
        break;
    case 4:
        ds_list_add(input,0);
        ds_list_add(input,1);
        repeat (2) ds_list_add(input,0);
        break;
    case 5:
        ds_list_add(input,0);
        ds_list_add(input,1);
        ds_list_add(input,0);
        ds_list_add(input,1);
        break;
    case 6:
        ds_list_add(input,0);
        repeat (2) ds_list_add(input,1);
        ds_list_add(input,0);
        break;
    case 7:
        ds_list_add(input,0);
        repeat (3) ds_list_add(input,1);
        break;
    case 8:
        ds_list_add(input,1);
        repeat (3) ds_list_add(input,0);
        break;
    case 9:
        ds_list_add(input,1);
        repeat (2) ds_list_add(input,0);
        ds_list_add(input,1);
        break;
    default:
        repeat (4) ds_list_add(input,0);
}

switch (yy)
{
    case 0:
        repeat (4) ds_list_add(input,0);
        break;
    case 1:
        repeat (3) ds_list_add(input,0);
        ds_list_add(input,1);
        break;
    case 2:
        repeat (2) ds_list_add(input,0);
        ds_list_add(input,1);
        ds_list_add(input,0);
        break;
    case 3:
        repeat (2) ds_list_add(input,0);
        ds_list_add(input,1);
        ds_list_add(input,1);
        break;
    case 4:
        ds_list_add(input,0);
        ds_list_add(input,1);
        repeat (2) ds_list_add(input,0);
        break;
    case 5:
        ds_list_add(input,0);
        ds_list_add(input,1);
        ds_list_add(input,0);
        ds_list_add(input,1);
        break;
    case 6:
        ds_list_add(input,0);
        repeat (2) ds_list_add(input,1);
        ds_list_add(input,0);
        break;
    case 7:
        ds_list_add(input,0);
        repeat (3) ds_list_add(input,1);
        break;
    case 8:
        ds_list_add(input,1);
        repeat (3) ds_list_add(input,0);
        break;
    case 9:
        ds_list_add(input,1);
        repeat (2) ds_list_add(input,0);
        ds_list_add(input,1);
        break;
    default:
        repeat (4) ds_list_add(input,0);
}
//Send the input to the network//
annie_send_input(ann,input);

//Run the network//
output = annie_run(ann);

//Set expected output//
for (i = 4; i &lt; 8; i += 1) 
{
    ds_list_add(exp_output, ds_list_find_value(input,i));
}
for (i = 0; i &lt; 4; i += 1)
{
    ds_list_add(exp_output, ds_list_find_value(input,i));
}

//Train the network//
annie_train(ann,output,exp_output);

count += 1;
if (count &gt;= 1000)
{
    //Show the output to the user//
    str1 = "";
    for (i = 0; i &lt; 7; i += 1)
    {
        str1 += string(ds_list_find_value(input,i)) + " , ";
    }
    str1 += string(ds_list_find_value(input,7));
    
    str2 = "";
    for (i = 0; i &lt; 7; i += 1)
    {
        str2 += string(ds_list_find_value(output,i)) + " , ";
    }
    str2 += string(ds_list_find_value(output,7));
    
    str3 = "";
    for (i = 0; i &lt; 7; i += 1)
    {
        str3 += string(ds_list_find_value(exp_output,i)) + " , ";
    }
    str3 += string(ds_list_find_value(exp_output,7));
    
    if (ds_list_equal(output,exp_output))
    {str4 = "Same!";}
    else
    {str4 = "Different...";}
    
    q = show_question("Results:##Input -&gt; " + str1 + "##Output -&gt; " + str2 + "##Expected Output -&gt; " + str3 + "##" + str4 + " Do you wish to continue?");
    count = 0;
}
}
until (q == false);
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
